# Import the data
my_data <- read.csv('vehicles.csv')
View(my_data)
# View Data
head(my_data)
tail(my_data)
View(my_data)
# Indexing my data: 1 means what row and 3 means what column
my_data[1,3]
View(my_data)
# This will return my entire 3rd column
my_data[ ,3]
# This will do the same as the code above
my_data$displacement
# Install and use packages:
# Packages have programmed functions that solve specific problems -
# and expand the R vocabulary
install.packages('tidyverse')
library('tidyverse')
my_data %>%
select(highwaympg, make, model)
my_data %>%
select(highwaympg, make, model) %>%
filter(highwaympg < 34)
my_data %>%
select(highwaympg, make, model) %>%
filter(highwaympg < 20) %>%
arrange(model)
View(starwars)
# In this R program I want to analyze the BMI for the human star-wars characters.
# I will start by piping the desired variables
starwars %>%
select(gender, mass, height, species)
# In this R program I want to analyze the BMI for the human star-wars characters.
# I will start by piping the desired variables
starwars %>%
select(sex, mass, height, species)
# In this R program I want to analyze the BMI for the human star-wars characters.
# I will start by piping the desired variables
starwars %>%
select(sex, mass, height, species) %>%
filter(species == 'Human')
# In this R program I want to analyze the BMI for the human star-wars characters.
# I will start by piping the desired variables
starwars %>%
select(sex, mass, height, species) %>%
filter(species == 'Human') %>%
na.omit()
# In this R program I want to analyze the BMI for the human star-wars characters.
# I will start by piping the desired variables.
# I need to mutate(change) my height from meters to centimeters
starwars %>%
select(sex, mass, height, species) %>%
filter(species == 'Human') %>%
na.omit() %>%
mutate(height = height /100)
# In this R program I want to analyze the BMI for the human star-wars characters.
# I will start by piping the desired variables.
# I need to mutate(change) my height from meters to centimeters
# I will create a bmi variable (^2 means its squared)
starwars %>%
select(sex, mass, height, species) %>%
filter(species == 'Human') %>%
na.omit() %>%
mutate(height = height /100) %>%
mutate(BMI = mass / height^2)
# In this R program I want to analyze the BMI for the human star-wars characters.
# I will start by piping the desired variables.
# I need to mutate(change) my height from meters to centimeters
# I will create a bmi variable (^2 means its squared)
starwars %>%
select(sex, mass, height, species) %>%
filter(species == 'Human') %>%
na.omit() %>%
mutate(height = height /100) %>%
mutate(BMI = mass / height^2) %>%
group_by(gender) %>%
summarise(Average_BMI = mean(BMI))
# In this R program I want to analyze the BMI for the human star-wars characters.
# I will start by piping the desired variables.
# I need to mutate(change) my height from meters to centimeters
# I will create a bmi variable (^2 means its squared)
starwars %>%
select(sex, mass, height, species) %>%
filter(species == 'Human') %>%
na.omit() %>%
mutate(height = height /100) %>%
mutate(BMI = mass / height^2) %>%
group_by(sex) %>%
summarise(Average_BMI = mean(BMI))
# I will now be renaming variables and reordering columns
# Start by making a data fame named sw
sw <- starwars
View(sw)
# I will now be renaming variables and reordering columns
# Start by making a data fame named sw.
# Then pipe the desired columns
sw <- starwars %>%
select(name, height, mass)
# I will now be renaming variables and reordering columns
# Start by making a data fame named sw.
# Then pipe the desired columns
# now I rename the columns to the name I want.
sw <- starwars %>%
select(name, height, mass) %>%
rename(weight = mass)
# I will now tidy up my data frame and get rid of missing values-
# rename content that's within a column, and change some metrics.
sw1 <- starwars %>%
select(name, height, mass, sex) %>%
rename(weight = mass) %>%
na.omit()
View(sw1)
sw1 <- starwars %>%
select(name, height, mass, sex) %>%
rename(weight = mass) %>%
na.omit() %>%
mutate(height = height / 100)
sw1 <- starwars %>%
select(name, height, mass, sex) %>%
rename(weight = mass) %>%
na.omit() %>%
mutate(height = height / 100) %>%
filter(sex == 'male' |
sex == 'female')
sw1 <- starwars %>%
select(name, height, mass, sex) %>%
rename(weight = mass) %>%
na.omit() %>%
mutate(height = height / 100) %>%
filter(sex %in% c('male', 'female'))
sw1 <- starwars %>%
select(name, height, mass, sex) %>%
rename(weight = mass) %>%
na.omit() %>%
mutate(height = height / 100) %>%
filter(sex %in% c('male', 'female'))
sw1 <- starwars %>%
select(name, height, mass, sex) %>%
rename(weight = mass) %>%
na.omit() %>%
mutate(height = height / 100) %>%
filter(sex %in% c('male', 'female')) %>%
mutate(sex = recode(sex,
male = 'm',
female = 'f'))
# The last thing i want to do is create a new variable in my data frame-
# called size. I want size to say, for any of the star-wars characters that are-
# taller than one meter and weigh more than 70 Kilograms I'm gonna call them big.
# If not I'll call them small.
sw1 <- starwars %>%
select(name, height, mass, sex) %>%
rename(weight = mass) %>%
na.omit() %>%
mutate(height = height / 100) %>%
filter(sex %in% c('male', 'female')) %>%
mutate(sex = recode(sex,
male = 'm',
female = 'f')) %>%
mutate(size = height > 1 & weight > 75)
# The size column will return a logical vector. Since i want it to say big or small-
# I will use the if_else method on the size variable
sw1 <- starwars %>%
select(name, height, mass, sex) %>%
rename(weight = mass) %>%
na.omit() %>%
mutate(height = height / 100) %>%
filter(sex %in% c('male', 'female')) %>%
mutate(sex = recode(sex,
male = 'm',
female = 'f')) %>%
mutate(size = height > 1 & weight > 75,
size = if_else(size == TRUE, 'big', 'small'))
library(tidyverse)
View(msleep)
# 1
ms_df <- msleep %>%
select(name, sleep_total) %>%
filter(sleep_total > 18)
# 1
ms_df <- msleep %>%
select(name, sleep_total) %>%
filter(sleep_total > 18)
View(ms_df)
# 2:
# I can use the ! to indicate that i want the filter to do the-
# opposite. So in the code below I will get the animals that sleep less
ms_df <- msleep %>%
select(name, sleep_total) %>%
filter(!sleep_total > 18)
# 3:
# I can use a filter with more than one criteria
ms_df <- msleep %>%
select(name, order, bodywt, sleep_total) %>%
filter(order == 'Primates', bodywt > 20)
# 4:
# Using the | which is the OR operator
ms_df <- msleep %>%
select(name, order, bodywt, sleep_total) %>%
filter(order == 'Primates' | bodywt > 20)
# 4:
# Using the | which is the OR operator, meaning that if either of these-
# criteria are met, then return the results.
ms_df <- msleep %>%
select(name, order, bodywt, sleep_total) %>%
filter(order == 'Primates' | bodywt > 20)
# 5:
# I can use the OR operator multiple times to continue to filter
ms_df <- msleep %>%
select(name, sleep_total) %>%
filter(name == 'Cow' |
name == 'Dog' |
name == 'Goat')
# 6:
# A more elegant way of doing the above code is by using the %in%-
# and create a concatenation. This is filtering out any name within the concatenation.
ms_df <- msleep %>%
select(name, sleep_total) %>%
filter(name %in% c('Cow', 'Dog', 'Horse'))
# 7:
# Using the between, filters out the numbers
ms_df <- msleep %>%
select(name, sleep_total) %>%
filter(between(sleep_total, 16, 18))
# 8:
# This will filter anything that is near or close to the criteria defined
ms_df <- msleep %>%
select(name, sleep_total) %>%
filter(near(sleep_total, 17, tol = 0.5))
# 9:
# Filtering for a particular variable with a missing value
ms_df <- msleep %>%
select(name, conservation, sleep_total) %>%
filter(is.na(conservation))
# 10:
# Opposite as the code above. This will return the values in the variable(column)-
# that are not missing
ms_df <- msleep %>%
select(name, conservation, sleep_total) %>%
filter(!is.na(conservation))
cars <- my_data
View(cars)
# Using the plot function to make a histogram
hist(cars$make)
# Using the plot function to make a histogram
hist(cars$cylinders)
# If I use the function attach, I don't need to use the $ -
# because the object cars is now attached
attach(cars)
hist(highwaympg)
# I can use the summary function to get a stats description of the-
# values in the data frame
summary(cars)
summary(citympg)
# My data frame
cars <- my_data
# Using the plot function to make a histogram
hist(cars$cylinders)
# If I use the function attach, I don't need to use the $ -
# because the object cars is now attached. This allows me to just-
# use the column names.
attach(cars)
hist(highwaympg)
# I can use the summary function to get a stats description of the-
# values in the data frame
summary(cars)
summary(citympg)
# I can also use the class function to tell me the data type of my object
class(cars)
class(citympg)
# I can also geth the length of a specific column
length(citympg)
# Getting unique values
unique(citympg)
# Same as python, I can use the head and tail function
head(cars)
tail(cars)
# Getting a subset of columns and rows
cars[3:6,1:2]
# When i want some info on the function I want to use I can-
# put the ? in front of the function name and i will get a -
# description of the function
?median
median(highwaympg)
# To fix this i need to change the parameter na.rm = FALSE to TRUE
median(highwaympg, na.rm = TRUE)
library(tidyverse)
data()
?starwars
# The dim function tells the dimension of the data set
dim(starwars)
# The glimpse function returns a clean list of the columns in my data frame
glimpse(starwars)
View(starwars)
# For the sake of this practice program I will use the attach function
attach(starwars)
# The names function gives me all the names of the variables
names(starwars)
